import aiosqlite
from typing import Optional

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ‚Äî –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
_db_connection = None

async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –í—ã–∑—ã–≤–∞—Ç—å –û–î–ò–ù –†–ê–ó –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    global _db_connection
    _db_connection = await aiosqlite.connect("Vilka_base1.db")
    _db_connection.row_factory = aiosqlite.Row  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Å—Ç–æ–ª–±—Ü–∞–º –ø–æ –∏–º–µ–Ω–∏
    await create_table()

async def create_table():
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    # –£–¥–∞–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É (–±—ã–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–æ–º—Å—Ç—å)
    # await _db_connection.execute('DROP TABLE IF EXISTS quiz_state')
    await _db_connection.execute('''
        CREATE TABLE IF NOT EXISTS quiz_state (
            user_id INTEGER PRIMARY KEY,
            question_index INTEGER DEFAULT 0,
            current_correct INTEGER DEFAULT 0,
            achieved_achievements TEXT,
            score INTEGER DEFAULT 0,
            lang TEXT DEFAULT 'ru',
            completion_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    await _db_connection.commit()


async def get_quiz_index(user_id: int) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with _db_connection.execute(
        "SELECT question_index FROM quiz_state WHERE user_id = ?", (user_id,)
    ) as cursor:
        row = await cursor.fetchone()
        return row["question_index"] if row else 0

async def update_quiz_index(user_id: int, index: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –≤ –ë–î"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å
    async with _db_connection.execute(
        "SELECT 1 FROM quiz_state WHERE user_id = ?", (user_id,)
    ) as cursor:
        exists = await cursor.fetchone()
    
    if exists:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω–¥–µ–∫—Å
        await _db_connection.execute(
            "UPDATE quiz_state SET question_index = ? WHERE user_id = ?",
            (index, user_id)
        )
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        await _db_connection.execute(
            "INSERT INTO quiz_state (user_id, question_index) VALUES (?, ?)",
            (user_id, index)
        )
    await _db_connection.commit()

async def reset_current_correct(user_id: int):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    await _db_connection.execute(
        "UPDATE quiz_state SET current_correct = 0 WHERE user_id = ?",
        (user_id,)
    )
    await _db_connection.commit()

async def up_current_correct(user_id: int, current: int):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    await _db_connection.execute(
        "UPDATE quiz_state SET current_correct = ? WHERE user_id = ?",
        (current, user_id)
    )
    await _db_connection.commit()

async def get_current_correct(user_id: int) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with _db_connection.execute(
        "SELECT current_correct FROM quiz_state WHERE user_id = ?", (user_id,)
    ) as cursor:
        row = await cursor.fetchone()
        return row["current_correct"] if row else 0

async def get_achieved_achievements(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with _db_connection.execute(
        "SELECT achieved_achievements FROM quiz_state WHERE user_id = ?", (user_id,)
    ) as cursor:
        row = await cursor.fetchone()
        return row["achieved_achievements"] if row else ""

async def update_achieved_achievements(user_id: int, achieve: str):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å
    async with _db_connection.execute(
        "SELECT 1 FROM quiz_state WHERE user_id = ?", (user_id,)
    ) as cursor:
        exists = await cursor.fetchone()
    
    if exists:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        await _db_connection.execute(
            "UPDATE quiz_state SET achieved_achievements = ? WHERE user_id = ?",
            (achieve, user_id)
        )
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        await _db_connection.execute(
            "INSERT INTO quiz_state (user_id, achieved_achievements) VALUES (?, ?)",
            (user_id, achieve)
        )
    await _db_connection.commit()

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
async def debug_user_state(user_id: int):
    """–í—ã–≤–æ–¥–∏—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    async with _db_connection.execute(
        "SELECT * FROM quiz_state WHERE user_id = ?", (user_id,)
    ) as cursor:
        row = await cursor.fetchone()
        if row:
            print(f"üîç DEBUG: user_id={row['user_id']}, index={row['question_index']}, correct={row['current_correct']}, achievements='{row['achieved_achievements']}'")
        else:
            print(f"üîç DEBUG: user_id={user_id} - –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –ë–î")

  
async def save_quiz_result(user_id: int, score: int, lang: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–≤–∏–∑–∞"""
    await _db_connection.execute(
        """INSERT OR REPLACE INTO quiz_state 
           (user_id, score, lang, completion_date) 
           VALUES (?, ?, ?, CURRENT_TIMESTAMP)""",
        (user_id, score, lang)
    )
    await _db_connection.commit()

async def get_last_result(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with _db_connection.execute(
        """SELECT score, lang, completion_date 
           FROM quiz_state 
           WHERE user_id = ? AND score IS NOT NULL
           ORDER BY completion_date DESC 
           LIMIT 1""",
        (user_id,)
    ) as cursor:
        row = await cursor.fetchone()
        if row:
            return {
                "score": row["score"],               
                "lang": row["lang"],
                "date": row["completion_date"]
            }
        return None
    
async def close_db():
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    if _db_connection:
        await _db_connection.close()